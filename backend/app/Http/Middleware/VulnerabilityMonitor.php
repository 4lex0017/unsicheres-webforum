<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Carbon\Carbon;

class VulnerabilityMonitor
{
    /**
     * Handle an incoming request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Closure(\Illuminate\Http\Request): (\Illuminate\Http\Response|\Illuminate\Http\RedirectResponse)  $next
     * @return \Illuminate\Http\Response|\Illuminate\Http\RedirectResponse
     */
    public function handle(Request $request, Closure $next)
    {
        $body_content = $request->getContent();
        $url = $request->path();
        $ip = $request->ip();
        //TODO: Check for authentication to pre-registered account, Command Injection
        $contains_sql_injection = preg_match("/';\\)/", $body_content);
        $contains_stored_xss = preg_match("/<#*#>/", $body_content);
        $contains_reflected_xss = preg_match("/<#*#>/", $url);
        $time_pre_request = Carbon::now()->timestamp;
        if($contains_sql_injection != false) {
            Log::debug('Successful SQL injection from '+$ip);
            writeSuccess($ip, '0');
        }
        if($contains_stored_xss != false) {
            Log::debug('Successful stored XSS from '+$ip);
            writeSuccess($ip, '1');
        }
        if($contains_reflected_xss != false) {
            Log::debug('Successful reflected XSS from '+$ip);
            writeSuccess($ip, '2');
        }

        $response = $next($request);

        $time_post_request = Carbon::now()->timestamp;
        //TODO: potentially reinitialise database/undo changes
        //TODO: check average time on init, compare with time here
        if($contains_sql_injection!=false && $time_post_request-$time_pre_request > 1000) {
            Log::debug('Successful blind SQL injection from '+$ip);
            writeSuccess($ip, '4');
        }
        return $response;
    }

    private function writeSuccess(string $ip, string $vulnerability) {
        DB::connection('secure')->unprepared(
            "INSERT INTO 'attackers' (ip_address)
            SELECT ?
            WHERE NOT EXISTS(SELECT 1 FROM attackers WHERE ip_address = ?", [$ip, $ip]
        );
        $user = DB::connection('secure')->select(
            "SELECT attacker_id FROM 'attackers'
            WHERE ip_address = ?", [$ip]
        );
        DB::connection('secure')->unprepared(
            "INSERT INTO 'found_vulnerabilities' (attacker_id, vulnerability_id)
            VALUES (?, ?)", [$user->attacker_id, $vulnerability]
        );
    }
}
