<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Carbon\Carbon;
use Illuminate\Support\Facades\Artisan;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\DB;
class VulnerabilityMonitor
{
    /**
     * Handle an incoming request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Closure(\Illuminate\Http\Request): (\Illuminate\Http\Response|\Illuminate\Http\RedirectResponse)  $next
     * @return \Illuminate\Http\Response|\Illuminate\Http\RedirectResponse
     */
    public function handle(Request $request, Closure $next)
    {
        $body_content = $request->all();
        $url = $request->path();
        $ip = $request->ip();

        //TODO: Check for authentication to pre-registered account, Command Injection

        $contains_sql_injection = false;
        $contains_stored_xss = false;
        foreach($body_content as $value)
        {
            if(!$contains_sql_injection) {
                $contains_sql_injection = preg_match("/';\\)/", $value);
            }
            if(!$contains_stored_xss) {
                $contains_stored_xss = preg_match("/<#*#>/", $value);
            }
        }
        $contains_query_sql_injection = preg_match("/';\\)/", $url);
        $contains_reflected_xss = preg_match("/<#*#>/", $url);
        $time_pre_request = Carbon::now()->timestamp;
        if($contains_sql_injection) {
            VulnerabilityMonitor::writeSuccess($ip, $url, "sqli");
        }
        if($contains_query_sql_injection) {
            VulnerabilityMonitor::writeSuccess($ip, $url, "sqli");
        }
        if($contains_stored_xss) {
            VulnerabilityMonitor::writeSuccess($ip, $url, "sxss");
        }
        if($contains_reflected_xss) {
            VulnerabilityMonitor::writeSuccess($ip, $url, "rxss");
        }

        $response = $next($request);

        $time_post_request = Carbon::now()->timestamp;
        if($contains_query_sql_injection || $contains_reflected_xss || $contains_sql_injection || $contains_stored_xss) {
            VulnerabilityMonitor::resetDB();
        }
        //TODO: check average time on init, compare with time here
        if($contains_sql_injection && $time_post_request-$time_pre_request > 1000) {
            Log::debug('Successful blind SQL injection from ' . $ip);
            VulnerabilityMonitor::writeSuccess($ip, $url, 'bsqli');
        }
        return $response;
    }

    /**
     * @param string $ip
     * @param string $uri
     * @param string $type
     * @return void
     */
    function writeSuccess(string $ip, string $uri, string $type): void
    {
        DB::connection('secure')->unprepared(
            "INSERT INTO 'attackers' (ip_address)
            SELECT " . $ip . "
            WHERE NOT EXISTS(SELECT 1 FROM attackers WHERE ip_address = " . $ip
        );
        $user = DB::connection('secure')->select(
            "SELECT attacker_id FROM 'attackers'
            WHERE ip_address = ?", [$ip]
        )[0];
        $vuln_id = DB::connection('secure')->select(
            "SELECT vulnerability_id FROM 'vulnerabilities'
            WHERE uri = ?", [$uri]
        )[0];
        DB::connection('secure')->unprepared(
            "INSERT INTO 'found_vulnerabilities' (attacker_id, vulnerability_id, vuln_type)
            VALUES (" . $user->attacker_id . ", " . $vuln_id . ", " . $type . ")"
        );
    }

    function resetDB(): void
    {
        Artisan::call('migrate:refresh', [
            '--path' => '/database/migrations/insecure'
        ]);
    }
}
