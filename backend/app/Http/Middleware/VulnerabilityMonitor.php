<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Carbon\Carbon;
use Illuminate\Support\Facades\Artisan;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\DB;
use App\Models\RequestTime;

class VulnerabilityMonitor
{
    protected array $sqlite_keywords = ["%20and%20", "%20or%20", "%20not%20", "%20union%20", "%20benchmark%20", "%20sleep%20"];
    protected array $bsqli_keywords = ["benchmark", "sleep"];
    protected array $reset_worthy_keywords = ["alter", "attach", "create", "delete", "drop"];

    /**
     * Handle an incoming request.
     *
     * @param \Illuminate\Http\Request $request
     * @param \Closure(\Illuminate\Http\Request): (\Illuminate\Http\Response|\Illuminate\Http\RedirectResponse)  $next
     * @return \Illuminate\Http\Response|\Illuminate\Http\RedirectResponse
     */
    public function handle(Request $request, Closure $next)
    {
        $body_content = $request->getContent();
        $url = $request->getRequestUri();
        $ip = $request->ip();

        //TODO: Check for authentication to pre-registered account, Command Injection
        $contains_sql_injection = $this->checkSqliEscape($body_content);
        $contains_stored_xss = preg_match("/<.*>.*<\/.*>/", $body_content);
        $contains_query_sql_injection = $this->checkQuerySqli($url);
        //regex that matches <.*>.*</.*>, but encoded as URI can't contain <,> or /
        Log::debug($url);
        $contains_reflected_xss = preg_match("/%3C.*%3E.*%3C%2F.*%3E/", $url);
        $contains_reset_worthy_sqli = $this->checkResetDB($body_content, $url, $this->reset_worthy_keywords);
        $time_pre_request = Carbon::now()->valueOf();

        if ($contains_reset_worthy_sqli == false) {
            $response = $next($request);
        } else {
            return response()->noContent()->header("Access-Control-Expose-Headers", "VulnFound")
                ->header("VulnFound", "true");
        }

        $time_post_request = Carbon::now()->valueOf();

        if (($contains_query_sql_injection || $contains_sql_injection) == false) {
            $this->storeRequestTime($time_post_request, $time_pre_request);
        }

        $contains_blind_sqli = $this->checkBlindSqli($body_content, $url, $contains_sql_injection, $contains_query_sql_injection, $time_post_request, $time_pre_request);

        return $this->checkSuccessfulExploits($contains_sql_injection, $ip, $url, $contains_query_sql_injection, $contains_stored_xss, $contains_reflected_xss, $contains_blind_sqli, $response);
    }

    /**
     * @param bool|string|null $body_content
     * @return false|int
     */
    public function checkSqliEscape(bool|string|null $body_content): int|false
    {
        return strpos($body_content, "');");
    }

    /**
     * @param string $url
     * @return bool|int
     */
    public function checkQuerySqli(string $url): int|bool
    {
        $uri_segments = explode("?", $url);
        $contains_query_sql_injection = $this->checkSqliEscape($url);
        if (!$contains_query_sql_injection) {
            $contains_query_sql_injection = $this->checkKeywords($uri_segments[0], $this->sqlite_keywords);
        }
        return $contains_query_sql_injection;
    }

    /**
     * @param string $body_content
     * @param string $uri
     * @param array $keywords
     * @return bool
     */
    public function checkResetDB(string $body_content, string $uri, array $keywords): bool
    {
        $result = $this->checkKeywords($uri, $keywords);
        if ($result == false) {
            $result = $this->checkKeywords($body_content, $keywords);
        }
        return $result;
    }

    /**
     * @param string $uri
     * @param array $keywords
     * @return bool
     */
    public function checkKeywords(string $uri, array $keywords): bool
    {
        foreach ($keywords as $keyword) {
            if (stripos($uri, $keyword) != false) {
                return true;
            }
        }
        return false;
    }

    /**
     * @param string $body_content
     * @param string $url
     * @param bool|int $contains_sql_injection
     * @param bool|int $contains_query_sql_injection
     * @param float $time_post_request
     * @param float $time_pre_request
     * @return bool
     */
    public function checkBlindSqli(string $body_content, string $url, bool|int $contains_sql_injection, bool|int $contains_query_sql_injection, float $time_post_request, float $time_pre_request): bool
    {
        $contains_bsqli_keywords = $this->checkKeywords($url, $this->bsqli_keywords);
        if (!$contains_bsqli_keywords) {
            $contains_bsqli_keywords = $this->checkKeywords($body_content, $this->bsqli_keywords);
        }
        $average_request_time = $this->getAverageRequestTime();
        if (($contains_sql_injection || $contains_query_sql_injection) && $time_post_request - $time_pre_request > $average_request_time * 5 && $contains_bsqli_keywords) {
            return true;
        }
        return false;
    }

    /**
     * @return mixed
     */
    public function getAverageRequestTime(): mixed
    {
        return DB::connection('secure')->table('request_times')->average('time');
    }

    /**
     * @param bool|int $contains_sql_injection
     * @param string|null $ip
     * @param string $url
     * @param bool|int $contains_query_sql_injection
     * @param bool|int $contains_stored_xss
     * @param bool|int $contains_reflected_xss
     * @param bool|int $contains_blind_sqli
     * @return void
     */
    public function checkSuccessfulExploits(bool|int $contains_sql_injection, ?string $ip, string $url, bool|int $contains_query_sql_injection, bool|int $contains_stored_xss, bool|int $contains_reflected_xss, bool|int $contains_blind_sqli, mixed $response): mixed
    {
        $hasVuln = false;
        if ($contains_sql_injection) {
            Log::debug("successful SQLI from " . $ip);
            VulnerabilityMonitor::writeSuccess($ip, $url, "sqli");
            $hasVuln = true;
        }
        if ($contains_query_sql_injection) {
            Log::debug("successful SQLI from " . $ip);
            VulnerabilityMonitor::writeSuccess($ip, $url, "sqli");
            $hasVuln = true;
        }
        if ($contains_stored_xss != 0) {
            Log::debug("successful SXSS from " . $ip);
            VulnerabilityMonitor::writeSuccess($ip, $url, "sxss");
            $hasVuln = true;
        }
        if ($contains_reflected_xss != 0) {
            Log::debug("successful RXSS from " . $ip);
            VulnerabilityMonitor::writeSuccess($ip, $url, "rxss");
            $hasVuln = true;
        }
        if ($contains_blind_sqli) {
            Log::debug('Successful BSQLI from ' . $ip);
            VulnerabilityMonitor::writeSuccess($ip, $url, 'bsqli');
            $hasVuln = true;
        }
        return $response->header("Access-Control-Expose-Headers", "VulnFound")->header("VulnFound", $hasVuln ? "true" : "false");
    }

    /**
     * @param string $ip
     * @param string $uri
     * @param string $type
     * @return void
     */
    function writeSuccess(string $ip, string $uri, string $type): void
    {
        $uri = (new VulnerabilityFilter)->getUriWithoutParams($uri);
        $this->storeAttacker($ip);
        $attacker_id = $this->getAttackerId($ip);
        $vuln_id = $this->getVulnerabilityId($uri);
        $this->storeFoundVulnerability($attacker_id, $vuln_id, $type);
    }

    /**
     * @param string $ip
     * @return void
     */
    public function storeAttacker(string $ip): void
    {
        DB::connection('secure')->unprepared(
            "INSERT OR IGNORE INTO attackers(ip_address) VALUES('" . $ip . "');"
        );
    }

    /**
     * @param string $ip
     * @return mixed|null
     */
    public function getAttackerId(string $ip): mixed
    {
        $attacker_id = DB::connection('secure')->table('attackers')->where('ip_address', $ip)->value('attacker_id');
        return $attacker_id;
    }

    /**
     * @param array|string|null $uri
     * @return mixed|null
     */
    public function getVulnerabilityId(array|string|null $uri): mixed
    {
        $vuln_id = DB::connection('secure')->table('vulnerabilities')->where('uri', '/' . $uri)->value('vulnerability_id');
        return $vuln_id;
    }

    /**
     * @param mixed $attacker_id
     * @param mixed $vuln_id
     * @param string $type
     * @return void
     */
    public function storeFoundVulnerability(mixed $attacker_id, mixed $vuln_id, string $type): void
    {
        if ($vuln_id == null || $attacker_id == null || $vuln_id == '' || $attacker_id == '') {
            return;
        }
        DB::connection('secure')->unprepared(
            "INSERT INTO 'found_vulnerabilities' (attacker_id, vulnerability_id, vuln_type)
            VALUES (" . $attacker_id . ", " . $vuln_id . ", '" . $type . "');"
        );
    }

    /**
     * @param float $time_post_request
     * @param float $time_pre_request
     * @return void
     */
    public function storeRequestTime(float $time_post_request, float $time_pre_request): void
    {
        $request_time = new RequestTime;
        $request_time->time = $time_post_request - $time_pre_request;
        $request_time->save();
    }
}
