<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;

class VulnerabilityMonitor
{
    /**
     * Handle an incoming request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Closure(\Illuminate\Http\Request): (\Illuminate\Http\Response|\Illuminate\Http\RedirectResponse)  $next
     * @return \Illuminate\Http\Response|\Illuminate\Http\RedirectResponse
     */
    public function handle(Request $request, Closure $next)
    {
        $bodyContent = $request->getContent();
        $url = $request->path();
        $ip = $request->ip();
        //TODO: Check for authentication to pre-registered account, Command Injection
        $containsSqlInjection = preg_match("';)", $bodyContent);
        $containsXss = preg_match("</*/>", $bodyContent);
        $containsReflectedXss = preg_match("</*/>", $url);
        if($containsSqlInjection != false) {
            Log::debug('Successful SQL injection from '+$ip);
            //TODO: write success to database
        }
        if($containsXss != false) {
            Log::debug('Successful stored XSS from '+$ip);
            //TODO: write success to database
        }
        if($containsReflectedXss != false) {
            Log::debug('Successful reflected XSS from '+$ip);
            //TODO: write success to database
        }

        $response = $next($request);

        //TODO: potentially reinitialise database/undo changes

        return $response;
    }
}
