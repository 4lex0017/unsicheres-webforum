<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Carbon\Carbon;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\DB;
use App\Models\RequestTime;

class VulnerabilityMonitor
{
    protected array $sqlite_keywords = [
        "%20and%20",
        "%20or%20",
        "%20not%20",
        "%20union%20",
        "%20benchmark%20",
        "%20sleep%20"
    ];
    protected array $bsqli_keywords = [
        "benchmark",
        "sleep"
    ];
    protected array $reset_worthy_keywords = [
        " add ",
        " alter ",
        " attach ",
        " create ",
        " delete ",
        " drop ",
        " create ",
        " column "
    ];
    protected array $escape_strings = [
        "PUT" => "--",
        "POST" => "--",
        "DELETE" => "--",
        "GET" => "--"
    ];

    /**
     * Handle an incoming request.
     *
     * @param \Illuminate\Http\Request $request
     * @param \Closure(\Illuminate\Http\Request): (\Illuminate\Http\Response|\Illuminate\Http\RedirectResponse)  $next
     * @return \Illuminate\Http\Response|\Illuminate\Http\RedirectResponse|JsonResponse
     */
    public function handle(Request $request, Closure $next)
    {
        $tracker = $request->cookie('tracker');
        if (!$tracker && $request->getRequestUri() != 'attacker') {
            return response()->json('Attacker is not logged in!', 409);
        }

        $body_content = $request->getContent();
        $url = $request->getRequestUri();
        $verb = $request->method();

        $contains_sql_injection = $this->checkSqliEscape($body_content, $verb);
        $contains_stored_xss = $this->checkStoredXss($body_content);
        $contains_query_sql_injection = $this->checkQuerySqli($url, $verb);
        $contains_reflected_xss = $this->checkReflectedXss($url);
        $contains_reset_worthy_sqli = $this->checkResetDB($body_content, $url, $this->reset_worthy_keywords);
        $contains_file_injection = $this->checkFileInjection($body_content);

        $time_pre_request = Carbon::now()->valueOf();

        if ($contains_reset_worthy_sqli == false) {
            $response = $next($request);
        } else {
            //TODO: write success to DB
            return response()
                ->noContent()
                ->header("Access-Control-Expose-Headers", "VulnFound, self")
                ->header("VulnFound", "true");
        }

        $time_post_request = Carbon::now()->valueOf();

        if (($contains_query_sql_injection || $contains_sql_injection) == false) {
            $this->storeRequestTime($time_post_request, $time_pre_request);
        }

        $contains_blind_sqli = $this->checkBlindSqli($body_content, $url, $contains_sql_injection, $contains_query_sql_injection, $time_post_request, $time_pre_request);

        return $this->checkSuccessfulExploits($contains_sql_injection, $tracker, $url, $contains_query_sql_injection, $contains_stored_xss, $contains_reflected_xss, $contains_blind_sqli, $contains_file_injection, $response);
    }

    /**
     * check $body_content for SQL escape strings
     *
     * @param bool|string|null $body_content
     * @param string $verb
     * @return false|int
     */
    public function checkSqliEscape(bool|string|null $body_content, string $verb): int|false
    {
        return strpos($body_content, $this->escape_strings[$verb]);
    }

    /**
     * check $body_content for stored XSS
     *
     * @param bool|string|null $body_content
     * @return false|int
     */
    public function checkStoredXss(bool|string|null $body_content): int|false
    {
        $contains_stored_xss = preg_match("/<.*>.*<\/.*>/", $body_content);
        if ($contains_stored_xss == 0) {
            $contains_stored_xss = preg_match("/<.*\/>/", $body_content);
        }
        return $contains_stored_xss;
    }

    /**
     * check $url for query SQL injection
     *
     * @param string $url
     * @param string $verb
     * @return int|bool
     */
    public function checkQuerySqli(string $url, string $verb): int|bool
    {
        $uri_segments = explode("?", $url);
        $contains_query_sql_injection = $this->checkSqliEscape($url, $verb);
        if (!$contains_query_sql_injection) {
            $contains_query_sql_injection = $this->checkKeywords($uri_segments[0], $this->sqlite_keywords);
        }
        return $contains_query_sql_injection;
    }

    /**
     * check whether $uri contains at least one word in $keywords
     *
     * @param string $uri
     * @param array $keywords
     * @return bool
     */
    public function checkKeywords(string $uri, array $keywords): bool
    {
        foreach ($keywords as $keyword) {
            if (stripos($uri, $keyword) != false) {
                return true;
            }
        }
        return false;
    }

    /**
     * check $uri for reflected XSS
     * this function only differs from checkStoredXss in the regex' it searches for, as URLs are encoded but body isn't
     *
     * @param string $url
     * @return false|int
     */
    public function checkReflectedXss(string $url): int|false
    {
        //regex that matches <.*>.*</.*>, but encoded as URI can't contain <,> or /
        $contains_reflected_xss = preg_match("/%3C.*%3E.*%3C%2F.*%3E/", $url);
        if ($contains_reflected_xss == 0) {
            //regex that matches <.*/>, but encoded as URI can't contain <,> or /
            $contains_reflected_xss = preg_match("/%3C.*%2F%3E/", $url);
        }
        return $contains_reflected_xss;
    }

    /**
     * check whether query contains SQL keywords that warrant not letting the request pass through
     *
     * @param string $body_content
     * @param string $uri
     * @param array $keywords
     * @return bool
     */
    public function checkResetDB(string $body_content, string $uri, array $keywords): bool
    {
        $result = $this->checkKeywords($uri, $keywords);
        if ($result == false) {
            $result = $this->checkKeywords($body_content, $keywords);
        }
        return $result;
    }

    /**
     * check for illegal file upload, using the implementation from VulnerabilityFilter
     *
     * @param string $body_content
     * @return bool|int
     */
    public function checkFileInjection(string $body_content): bool|int
    {
        return (new VulnerabilityFilter)->filterProfilePictureUpload(3, $body_content);
    }

    /**
     * stores request time in DB
     *
     * @param float $time_post_request
     * @param float $time_pre_request
     * @return void
     */
    public function storeRequestTime(float $time_post_request, float $time_pre_request): void
    {
        $request_time = new RequestTime;
        $request_time->time = $time_post_request - $time_pre_request;
        $request_time->save();
    }

    /**
     * check for successful blind SQL injection
     *
     * @param string $body_content
     * @param string $url
     * @param bool|int $contains_sql_injection
     * @param bool|int $contains_query_sql_injection
     * @param float $time_post_request
     * @param float $time_pre_request
     * @return bool
     */
    public function checkBlindSqli(string $body_content, string $url, bool|int $contains_sql_injection, bool|int $contains_query_sql_injection, float $time_post_request, float $time_pre_request): bool
    {
        $contains_bsqli_keywords = $this->checkKeywords($url, $this->bsqli_keywords);
        if (!$contains_bsqli_keywords) {
            $contains_bsqli_keywords = $this->checkKeywords($body_content, $this->bsqli_keywords);
        }
        $average_request_time = $this->getAverageRequestTime();
        if (($contains_sql_injection || $contains_query_sql_injection) && $time_post_request - $time_pre_request > $average_request_time * 5 && $contains_bsqli_keywords) {
            return true;
        }
        return false;
    }

    /**
     * get average time non-attacking requests take
     *
     * @return mixed
     */
    public function getAverageRequestTime(): mixed
    {
        return DB::connection('secure')
            ->table('request_times')
            ->average('time');
    }

    /**
     * check whether exploits were successful and writes successes to DB accordingly
     *
     * @param bool|int $contains_sql_injection
     * @param string|null $tracker
     * @param string $url
     * @param bool|int $contains_query_sql_injection
     * @param bool|int $contains_stored_xss
     * @param bool|int $contains_reflected_xss
     * @param bool|int $contains_blind_sqli
     * @param bool|int $contains_file_injection
     * @param mixed $response
     * @return mixed
     */
    public function checkSuccessfulExploits(bool|int $contains_sql_injection, ?string $tracker, string $url, bool|int $contains_query_sql_injection, bool|int $contains_stored_xss, bool|int $contains_reflected_xss, bool|int $contains_blind_sqli, bool|int $contains_file_injection, mixed $response): mixed
    {
        $hasVuln = false;
        if ($contains_sql_injection) {
            Log::debug("successful SQLI from " . $tracker);
            VulnerabilityMonitor::writeSuccess($tracker, $url, "sqli");
            $hasVuln = true;
        }
        if ($contains_query_sql_injection) {
            Log::debug("successful SQLI from " . $tracker);
            VulnerabilityMonitor::writeSuccess($tracker, $url, "sqli");
            $hasVuln = true;
        }
        if ($contains_stored_xss != 0) {
            Log::debug("successful SXSS from " . $tracker);
            VulnerabilityMonitor::writeSuccess($tracker, $url, "sxss");
            $hasVuln = true;
        }
        if ($contains_reflected_xss != 0) {
            Log::debug("successful RXSS from " . $tracker);
            VulnerabilityMonitor::writeSuccess($tracker, $url, "rxss");
            $hasVuln = true;
        }
        if ($contains_blind_sqli) {
            Log::debug('Successful BSQLI from ' . $tracker);
            VulnerabilityMonitor::writeSuccess($tracker, $url, 'bsqli');
            $hasVuln = true;
        }
        if ($contains_file_injection) {
            Log::debug('Successful illegal file upload from ' . $tracker);
            VulnerabilityMonitor::writeSuccess($tracker, $url, 'file');
            $hasVuln = true;
        }
        if ($hasVuln == false) {
            $hasVuln = $response->headers->get('VulnFound') == "true";
        }
        return $response
            ->header("Access-Control-Expose-Headers", "VulnFound")
            ->header("VulnFound", $hasVuln ? "true" : "false");
    }

    /**
     * write successful use of exploit to DB
     *
     * @param string $tracker
     * @param string $uri
     * @param string $type
     * @return void
     */
    function writeSuccess(string $tracker, string $uri, string $type): void
    {
        $uri = (new VulnerabilityFilter)->getUriWithoutParams($uri);
        $attacker_id = $this->getAttackerId($tracker);
        $difficulty = $this->getDifficulty($uri, $type);
        $vuln_id = $this->getVulnerabilityId($uri);
        $this->storeFoundVulnerability($attacker_id, $difficulty, $type, $vuln_id);
    }

    /**
     * get attacker ID from DB
     *
     * @param string $tracker
     * @return mixed|null
     */
    public function getAttackerId(string $tracker): mixed
    {
        return DB::connection('secure')
            ->table('attackers')
            ->where('tracker', $tracker)
            ->value('attacker_id');
    }

    /**
     * get difficulty of found vulnerability from DB
     *
     * @param array|string|null $uri
     * @param $type
     * @return mixed
     */
    public function getDifficulty(array|string|null $uri, $type): mixed
    {
        if ($type == 'sqli' || $type == 'rxss' || $type == 'sxss' || $type == 'file') {
            return DB::connection('secure')
                ->table('vulnerabilities')
                ->where('uri', '/' . $uri)
                ->value($type . '_difficulty');
        }
        return 1;
    }

    /**
     * get ID of route
     *
     * @param $uri
     * @return mixed|null
     */
    function getVulnerabilityId($uri): mixed
    {
        return DB::connection('secure')
            ->table('vulnerabilities')
            ->where('uri', '/' . $uri)
            ->value('vulnerability_id');
    }

    /**
     * stores found vulnerability in DB
     *
     * @param mixed $attacker_id
     * @param mixed $difficulty
     * @param string $type
     * @param string $vuln_id
     * @return void
     */
    public function storeFoundVulnerability(mixed $attacker_id, mixed $difficulty, string $type, string $vuln_id): void
    {
        if ($difficulty == null || $attacker_id == null || $difficulty == '' || $attacker_id == '') {
            return;
        }
        DB::connection('secure')
            ->table('found_vulnerabilities')
            ->insertOrIgnore(
                [
                    'attacker_id' => $attacker_id,
                    'difficulty' => $difficulty,
                    'vuln_type' => $type,
                    'vulnerability_id' => $vuln_id
                ]
            );
    }

}
