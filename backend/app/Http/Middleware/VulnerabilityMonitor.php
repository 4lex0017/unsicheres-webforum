<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Carbon\Carbon;
use Illuminate\Support\Facades\Artisan;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\DB;

class VulnerabilityMonitor
{
    /**
     * Handle an incoming request.
     *
     * @param \Illuminate\Http\Request $request
     * @param \Closure(\Illuminate\Http\Request): (\Illuminate\Http\Response|\Illuminate\Http\RedirectResponse)  $next
     * @return \Illuminate\Http\Response|\Illuminate\Http\RedirectResponse
     */
    public function handle(Request $request, Closure $next)
    {
        $body_content = $request->getContent();
        $url = $request->path();
        $ip = $request->ip();

        //TODO: Check for authentication to pre-registered account, Command Injection

        $contains_sql_injection = strpos($body_content, "');");
        $contains_stored_xss = preg_match("/<.*>.*<\/.*>/", $body_content);
        $contains_query_sql_injection = strpos($url, "');");
        $contains_reflected_xss = preg_match("/<.*>.*<\/.*>/", $url);

        Log::debug($contains_reflected_xss);
        $time_pre_request = Carbon::now()->timestamp;
        if ($contains_sql_injection) {
            VulnerabilityMonitor::writeSuccess($ip, $url, "sqli");
        }
        if ($contains_query_sql_injection) {
            VulnerabilityMonitor::writeSuccess($ip, $url, "sqli");
        }
        if ($contains_stored_xss) {
            VulnerabilityMonitor::writeSuccess($ip, $url, "sxss");
        }
        if ($contains_reflected_xss) {
            VulnerabilityMonitor::writeSuccess($ip, $url, "rxss");
        }

        $response = $next($request);

        $time_post_request = Carbon::now()->timestamp;
        if ($contains_query_sql_injection || $contains_reflected_xss || $contains_sql_injection || $contains_stored_xss) {
            VulnerabilityMonitor::resetDB();
        }
        //TODO: check average time on init, compare with time here
        if ($contains_sql_injection && $time_post_request - $time_pre_request > 1000) {
            Log::debug('Successful blind SQL injection from ' . $ip);
            VulnerabilityMonitor::writeSuccess($ip, $url, 'bsqli');
        }
        return $response;
    }

    /**
     * @param string $ip
     * @param string $uri
     * @param string $type
     * @return void
     */
    function writeSuccess(string $ip, string $uri, string $type): void
    {
        DB::connection('secure')->unprepared(
            "INSERT OR IGNORE INTO attackers(ip_address) VALUES('" . $ip . "');"
        );
        $attacker_id = DB::connection('secure')->table('attackers')->where('ip_address', $ip)->value('attacker_id');
        $vuln_id = DB::connection('secure')->table('vulnerabilities')->where('uri', '/'.$uri)->value('vulnerability_id');
        DB::connection('secure')->unprepared(
            "INSERT INTO 'found_vulnerabilities' (attacker_id, vulnerability_id, vuln_type)
            VALUES (" . $attacker_id . ", " . $vuln_id . ", '" . $type . "');"
        );
    }

    function resetDB(): void
    {
        Artisan::call('migrate:refresh', [
            '--path' => '/database/migrations/insecure',
            '--seed' => true,
        ]);
    }
}
