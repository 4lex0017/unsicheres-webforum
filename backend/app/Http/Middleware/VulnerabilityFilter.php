<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;

class VulnerabilityFilter
{
    /**
     * Handle an incoming request.
     *
     * @param \Illuminate\Http\Request $request
     * @param \Closure(\Illuminate\Http\Request): (\Illuminate\Http\Response|\Illuminate\Http\RedirectResponse)  $next
     * @return \Illuminate\Http\Response|\Illuminate\Http\RedirectResponse
     */
    public function handle(Request $request, Closure $next)
    {
        //TODO: remove query parameters
        $uri = $request->path();
        $body_content = $request->getContent();
        $sqli_difficulty = 2; //DB::connection('secure')->table('vulnerabilities')->where('uri', $uri)->value('sqli_difficulty');
        $rxss_difficulty = 2; //DB::connection('secure')->table('vulnerabilities')->where('uri', $uri)->value('rxss_difficulty');
        $sxss_difficulty = 2; //DB::connection('secure')->table('vulnerabilities')->where('uri', $uri)->value('sxss_difficulty');

        $body_content = $this->filterContent($sqli_difficulty, $body_content, $sxss_difficulty);

        $uri = $this->filterUri($sqli_difficulty, $uri, $rxss_difficulty);

        $final_request = Request::create($uri, $request->method(), $request->query->all(), $request->cookies->all(), $request->allFiles(), $request->server->all(), $body_content);
        return $next($final_request);
    }

    /**
     * @param mixed $sqli_difficulty
     * @param array|bool|string|null $body_content
     * @param mixed $sxss_difficulty
     * @return string
     */
    public function filterContent(mixed $sqli_difficulty, array|bool|string|null $body_content, mixed $sxss_difficulty): string
    {
        return $this->filter($sqli_difficulty, $body_content, $sxss_difficulty);
    }

    /**
     * @param mixed $sqli_difficulty
     * @param array|string $uri
     * @param mixed $rxss_difficulty
     * @return string
     */
    public function filterUri(mixed $sqli_difficulty, array|string $uri, mixed $rxss_difficulty): string
    {
        return $this->filter($sqli_difficulty, $uri, $rxss_difficulty);
    }

    /**
     * @param mixed $sqli_difficulty
     * @param array|string $uri
     * @param mixed $xss_difficulty
     * @return array|string|string[]
     */
    public function filter(mixed $sqli_difficulty, array|string $uri, mixed $xss_difficulty): string|array
    {
        if ($sqli_difficulty > 1) {
            while (preg_match("/'\\);/", $uri) != false) {
                $uri = str_replace("');", "", $uri);
                if ($sqli_difficulty == 2) {
                    break;
                }
            }
        }
        //FILTER RXSS
        if ($xss_difficulty > 3) {
            $uri = str_replace("<", "", $uri);
            $uri = str_replace(">", "", $uri);
        } else if ($xss_difficulty > 1) {
            while (preg_match("/<#*#>/", $uri) != false) {
                $uri = str_replace("<script>", "", $uri);
                $uri = str_replace("</script>", "", $uri);
                if ($xss_difficulty == 2) {
                    break;
                }
            }
        }
        return $uri;
    }
}
