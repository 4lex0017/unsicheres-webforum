<?php

namespace App\Http\Middleware;

use Closure;
use Exception;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;

class VulnerabilityFilter
{
    protected array $sqlite_keywords = ["and", "or", "not"];
    /**
     * Handle an incoming request.
     *
     * @param \Illuminate\Http\Request $request
     * @param \Closure(\Illuminate\Http\Request): (\Illuminate\Http\Response|\Illuminate\Http\RedirectResponse)  $next
     * @return \Illuminate\Http\Response|\Illuminate\Http\RedirectResponse
     */
    public function handle(Request $request, Closure $next)
    {
        $uri = $request->path();
        $body_content = $request->getContent();
        $uri_without_params = $this->getUriWithoutParams($uri);
        Log::debug($uri_without_params);
        $sqli_difficulty = $this->getDifficulty($uri_without_params, "sqli_difficulty");
        $rxss_difficulty = $this->getDifficulty($uri_without_params, "rxss_difficulty");
        $sxss_difficulty = $this->getDifficulty($uri_without_params, "sxss_difficulty");
        $body_content = $this->filter($sqli_difficulty, $body_content, $sxss_difficulty);

        $uri = $this->filterUri($uri, $sqli_difficulty, $rxss_difficulty);

        $final_request = $this->createFinalRequest($uri, $request, $body_content);
        return $next($final_request);
    }

    /**
     * @param $uri
     * @param $type
     * @return int
     */
    public function getDifficulty($uri, $type): int
    {
        try {
            $difficulty = DB::connection('secure')->table('vulnerabilities')->where('uri', '/' . $uri)->value($type);
            if($difficulty == null) {
                $difficulty = 4;
            }
            return (int)$difficulty;
        }
        catch (Exception) {
            return 4;
        }
    }

    /**
     * @param mixed $sqli_difficulty
     * @param array|string $uri
     * @param mixed $xss_difficulty
     * @return array|string|string[]
     */
    public function filter(mixed $sqli_difficulty, array|string $uri, mixed $xss_difficulty): string|array
    {
        $uri = $this->filterSqliEscape($sqli_difficulty, $uri);
        return $this->filterXss($xss_difficulty, $uri);
    }

    /**
     * @param string $uri
     * @param int $sqli_difficulty
     * @param int $rxss_difficulty
     * @return array|string|string[]
     */
    public function filterUri(string $uri, int $sqli_difficulty, int $rxss_difficulty): string|array
    {
        $uri_segments = explode("?", $uri);
        $uri_segments[0] = $this->filterSqliteKeywords($uri_segments[0], $sqli_difficulty);
        if (count($uri_segments) >= 2) {
            $uri_segments[1] = $this->filter($sqli_difficulty, $uri_segments[1], $rxss_difficulty);
            $uri = $uri_segments[0] . "?" . $uri_segments[1];
        } else {
            $uri = $uri_segments[0];
        }
        return $uri;
    }

    /**
     * @param string $uri
     * @param int $sqli_difficulty
     * @return string|array
     */
    public function filterSqliteKeywords(string $uri, int $sqli_difficulty): string|array
    {
        if($sqli_difficulty>2) {
            Log::debug("SQLI difficulty: " . $sqli_difficulty);
            Log::debug("checking URI " . $uri);
            while($this->checkSqliteKeywords($uri)) {
                foreach($this->sqlite_keywords as $keyword) {
                    $uri = str_replace($keyword, "", $uri);
                }
                if($sqli_difficulty==3) {
                    break;
                }
            }
            Log::debug("returning URI " . $uri);
        }
        return $uri;
    }

    /**
     * @param string $uri
     * @return bool
     */
    public function checkSqliteKeywords(string $uri): bool
    {
        foreach($this->sqlite_keywords as $keyword) {
            Log::debug("checking keyword " . $keyword);
            if(strpos($uri, $keyword) != false) {
                Log::debug("Detected keyword " . $keyword);
                return true;
            }
        }
        return false;
    }

    /**
     * @param mixed $sqli_difficulty
     * @param array|string $uri
     * @return array|string|string[]
     */
    public function filterSqliEscape(mixed $sqli_difficulty, array|string $uri): string|array
    {
        if ($sqli_difficulty > 1) {
            while (preg_match("/'\\);/", $uri) != false) {
                $uri = str_replace("');", "", $uri);
                if ($sqli_difficulty == 2) {
                    break;
                }
            }
        }
        return $uri;
    }

    /**
     * @param mixed $xss_difficulty
     * @param array|string $uri
     * @return array|string|string[]
     */
    public function filterXss(mixed $xss_difficulty, array|string $uri): string|array
    {
        if ($xss_difficulty > 3) {
            $uri = str_replace("<", "", $uri);
            $uri = str_replace(">", "", $uri);
        } else if ($xss_difficulty > 1) {
            while (preg_match("/<\/?script>/", $uri) != false) {
                $uri = str_replace("<script>", "", $uri);
                $uri = str_replace("</script>", "", $uri);
                if ($xss_difficulty == 2) {
                    break;
                }
            }
        }
        return $uri;
    }

    /**
     * @param array|string $uri
     * @param Request $request
     * @param array|string $body_content
     * @return Request
     */
    public function createFinalRequest(array|string $uri, Request $request, array|string $body_content): Request
    {
        return Request::create($uri, $request->method(), $request->query->all(), $request->cookies->all(), $request->allFiles(), $request->server->all(), $body_content);
    }

    /**
     * @param string $uri
     * @return array|string|string[]|null
     */
    public function getUriWithoutParams(string $uri): string|array|null
    {
        $uri_without_params = explode("?", $uri)[0];
        $uri_without_params = preg_replace("/\/\d+\//", "/{int}/", $uri_without_params);
        return preg_replace("/\/\d+(.)*/", "/{int}", $uri_without_params);
    }
}
